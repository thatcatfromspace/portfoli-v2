HASH TABLES

#include<iostream>
#include<unordered_map>

std::unordered_map<int,int> map;

int hash_function(int x,int capacity)
{
    return x%capacity;
}

void insert(int** hash_table, int data,int buckets,int slots)
{
    if(map.find(data)!=map.end())
        return;

    if(map.size()==buckets*slots)
    {
        std::cout << "Hash Table is full\n Note :  Please remove some elements to insert further" << std::endl;
        return;
    }

    int index=hash_function(data,buckets);
    std::cout << "The Index : " << index << std::endl;

    int flag=true;
    int counter=0;
    for(int j=index;j<buckets;j++)
    {
        for(int i=0;i<slots;i++)
        {
            if(hash_table[j%buckets][i]==-1)
            {
                //std::cout << hash_table[j%buckets][i]<< ' '<< j << ' ' << i << std::endl;
                hash_table[j%buckets][i]=data;
                map[data]=counter;
                flag=false;
                break;
            }
            counter++;
        }
        if(!flag)
            break;
    }
    return ;
}

void deleteEntry(int** hash_table,int data,int buckets,int slots)
{
    
}


void print(int** hash_table,int buckets,int slots)
{
    for(int i=0;i<buckets;i++)
    {
        for(int j=0;j<slots;j++)
            std::cout << hash_table[i][j]<< ' ';//<< ' ' << i << ' ' << j << std::endl;
        std::cout << std::endl;
    }
}

int main()
{
    const int buckets=11;
    const int slots=3;
    // std::cout << "Enter the number of buckets [ Prime Number is Preferrable ] : ";
    // std::cin >> buckets;
    // std::cout << "Enter the number of slots : ";
    // std::cin >> slots;

    int** hash_table = new int*[buckets];
    for(int i=0;i<buckets;i++)
        hash_table[i]=new int[slots];
    
    for(int i=0;i<buckets;i++)
    {
        for(int j=0;j<slots;j++)
            hash_table[i][j]=-1;
    }

    
    print(hash_table,buckets,slots);
    bool flag=true;
    int data,choice;

    std::cout << std::endl;
    print(hash_table,buckets,slots);
    while(flag)
    {
        std::cout << "There are some operations that you can perform using HASH TABLES" << std::endl;
        std::cout << "\n\t1.Insert an element\n\t2.Delete an element\n\t3.Find an element\n\t4.Print Hash Tables\n\t5.Exit" << std::endl;
        std::cout << "\n Enter your choice : ";
        std::cin >> choice;
        switch(choice)
        {
            case 1:
            {
                std::cout << "\n Enter a value to be inserted : ";
                std::cin >> data;
                insert(hash_table,data,buckets,slots);
                break;
            }
            case 2:
            {
                std::cout << std::endl << "Enter the value to be deleted : ";
                std::cin >> data;
                deleteEntry(hash_table,data,buckets,slots);
                break;
            }
            case 4:
            {
                std::cout << "The Hash Table : " << std::endl;
                print(hash_table,buckets,slots);
                break;
            }
            case 5: flag=false;break;
            default:std::cout << "Please Enter a valid choice [ CHOICE INVALID ]" << std::endl;break;
        }
    }

    return 0;
}






DISJOINT SET 

#include <iostream>
#include <vector>
#include <unordered_map>

using namespace std;

typedef struct Node
{
   int data;
   Node* link;

   Node(int d)
   {
      data = d;
      link = NULL;
   }
}
node;

typedef struct Head
{
   int n;
   node* first;
   node* last;

   Head()
   {
      n = 0;
      first = last = NULL;
   }
}
head;

void makeset(int d,vector<head*>& setHeads,unordered_map<int,int>& repTable)
{
   node* t = new node(d);
   head* h = new head();
   h->n = 1;
   h->first = h->last = t;
   setHeads.push_back(h);
   repTable[d] = d;
}

int find(int d,unordered_map<int,int>& repTable)
{
   return repTable[d];
}

void changeRep(unordered_map<int,int>& repTable,node* ptr,int rep)
{
   while(ptr != NULL)
   {
      repTable[ptr->data] = rep;
      ptr = ptr->link;
   }
}

void Union(int a,int b,vector<head*>& setHeads,unordered_map<int,int>& repTable)
{
   int repA = repTable[a];
   int repB = repTable[b];
   head* A = NULL;
   head* B = NULL;
   int posA, posB;
   for(int i = 0; i < setHeads.size(); i++)
   {
      head* ptr = setHeads[i];
      if(ptr->first->data == repA)
      {
         A = ptr;
         posA = i;
      }
      else if(ptr->first->data == repB)
      {
         B = ptr;
         posB = i;
      }
   }
   if(A->n >= B->n)
   {
      changeRep(repTable,B->first,A->first->data);
      A->last->link = B->first;
      A->last = B->last;
      A->n = A->n + B->n;
      setHeads.erase(setHeads.begin() + posB);
      delete B;
   }
   else if(B->n > A->n)
   {
      changeRep(repTable,A->first,B->first->data);
      B->last->link = A->first;
      B->last = A->last;
      B->n = A->n + B->n;
      setHeads.erase(setHeads.begin() + posA);
      delete A;
   }
}

void display(vector<head*> setHeads)
{
   for(head* ptr : setHeads)
   {
      cout<<"----------"<<endl;
      cout<<"Set size: "<< ptr->n <<endl;
      cout<<"Set representative: "<< ptr->first->data <<endl;
      cout<<"Elements of set"<<endl;
      node* p = ptr->first;
      while(p != NULL)
      {
         cout<< p->data <<endl;
         p = p->link;
      }
      cout<<"----------"<<endl;
   }
}

int main()
{
   int choice;
   vector<head*> setHeads;
   unordered_map<int,int> repTable;
   do
   {
      cout<<"==============="<<endl;
      cout<<"MAIN MENU"<<endl;
      cout<<"1. Make set"<<endl;
      cout<<"2. Find"<<endl;
      cout<<"3. Union"<<endl;
      cout<<"4. Display all sets"<<endl;
      cout<<"0. Exit"<<endl;
      cout<<"Enter your choice: ";
      cin>>choice;
      cout<<"==============="<<endl;
      switch(choice)
      {
         case 1:
         {
            int d;
            cout<<"Enter the element: ";
            cin>>d;
            makeset(d,setHeads,repTable);
            cout<<"Makeset is successful"<<endl;
            break;
         }
         case 2:
         {
            int d;
            cout<<"Enter the element: ";
            cin>>d;
            if(find(d,repTable) != 0)
               cout<<"Representative element: "<< find(d,repTable) <<endl;
            else
               cout<<"Element is not found"<<endl;
            break;
         }
         case 3:
         {
            int a,b;
            cout<<"Enter the first element: ";
            cin>>a;
            cout<<"Enter the second element: ";
            cin>>b;
            Union(a,b,setHeads,repTable);
            cout<<"Makeset is successful"<<endl;
            break;
         }
         case 4:
         {
            display(setHeads);
            break;
         }
         case 0:
         {
            break;
         }
         default:
         {
            cout<<"Invalid choice"<<endl;
         }
      }
   }
   while(choice != 0);
   return 0;
}
